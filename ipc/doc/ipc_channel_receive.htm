<HTML>
	<HEAD>
		<STYLE TYPE="text/css">
		<!--
			PRE.cjk { font-family: "DejaVu Sans", monospace }
			CODE.cjk { font-family: "DejaVu Sans", monospace }
			a:link { color: #0000FF; }
			a:visited { color: #0000FF; }
			a:hover { color: #0000FF; }
			a:active{ color: #0000FF; }
		-->
		</STYLE>
	</HEAD>
	
	<BODY BGCOLOR="#ffffff">
		
		<HR SIZE=1 NOSHADE>
		
		<H4>&nbsp;NAME</H4>
		
		<BLOCKQUOTE>
			ipc_channel_receive - Receive a message on an inter-process commmunication channel
		</BLOCKQUOTE>
		
		<H4>&nbsp;SYNOPSIS</H4>
		
		<PRE CLASS="western" STYLE="margin-left: 0.39in; margin-right: 0.39in"><CODE CLASS="western">#include "<A HREF="ipc_h.htm">ipc.h</A>"</CODE></PRE>
		
		<PRE CLASS="western" STYLE="margin-left: 0.39in; margin-right: 0.39in">int ipc_channel_receive(ipc_channel_server *channel, void *buffer, unsigned int *size, ipc_channel_server_client *client);</PRE>
		
		<H4>&nbsp;DESCRIPTION</H4>
		
		<BLOCKQUOTE>
			The <i>ipc_channel_receive()</i> function receives a message on an inter-process communication (IPC) channel created by 
			<A HREF="ipc_channel_create.htm">ipc_channel_create()</A>. <i>ipc_channel_receive()</i> will block until a 
			process transmits a messsage on the IPC channel using the <A HREF="ipc_channel_send.htm">ipc_channel_send()</A> or <A HREF="ipc_channel_send_and_receive.htm">ipc_channel_send_and_receive()</A> functions.
		</BLOCKQUOTE>
		
		<BLOCKQUOTE>
			<i>ipc_channel_receive()</i> may be called concurrently from multiple threads with the same <i>channel</i> argument. This allows for multi-threaded IPC servers to be
			constructed. Use <A HREF="../../thread/doc/thread_h.htm">thread.h</A> for cross-platform multi-threading support.
		</BLOCKQUOTE>
		
		<BLOCKQUOTE>
			The <i>channel</i> argument is a pointer to an <b>ipc_channel_server</b> type variable which has been initialized by a previous call to <A HREF="ipc_channel_create.htm">ipc_channel_create()</A>.
		</BLOCKQUOTE>
		
		<BLOCKQUOTE>
			The <i>buffer</i> argument is a pointer to a buffer in memory where the message may be stored, the size of this buffer should correspond to the value
			passed as the <i>size</i> argument to the <A HREF="ipc_channel_create.htm">ipc_channel_create()</A> function.
		</BLOCKQUOTE>
		
		<BLOCKQUOTE>
			The <i>size</i> argument is a pointer to an unsigned integer, upon successful completion of the function the value at <i>size</i> will indicate the size of the message in bytes which was copied to <i>buffer</i>.
			<BR>
			Note that it is possible for the size of a message to be zero, in this case no data is copied to <i>buffer</i>
		</BLOCKQUOTE>
		
		<BLOCKQUOTE>
			The <i>client</i> argument is a pointer to an <b>ipc_channel_server_client</b> type variable. After successful completion of the function the data placed in this 
			variable holds information about the client which transmitted the message. 
			In order to determine if the client connection was full-duplex (<A HREF="ipc_channel_send_and_receive.htm">ipc_channel_send_and_receive()</A>) or half-duplex (<A HREF="ipc_channel_send.htm">ipc_channel_send()</A>)
			the value returned to <i>client</i> must be passed to <A HREF="ipc_channel_client_type.htm">ipc_channel_client_type()</A>. 
			<BR>
			If the client's connection type is full-duplex then	a call to <A HREF="ipc_channel_respond.htm">ipc_channel_respond()</A> is neccessary in order to allow the client to continue operation.
		</BLOCKQUOTE>
		
		<H4>&nbsp;RETURN VALUE</H4>
		
		<BLOCKQUOTE>
			Upon successful completion the function returns zero.
		</BLOCKQUOTE>
		
		<H4>&nbsp;ERRORS</H4>
		
		<BLOCKQUOTE>
			In case of an error one of the following values will be returned:
		</BLOCKQUOTE>
		
		<DL>
			<DL>
				<BLOCKQUOTE>
					<DT STYLE="margin-right: 0.39in; margin-bottom: 0.2in">[IPC_ERROR_NULL_POINTER_ERROR]</DT>
					<DT STYLE="margin-right: 0.39in; margin-bottom: 0.2in">
						The <i>channel</i>, <i>buffer</i>, <i>size</i> or <i>client</i> arguments are NULL.
					</DT>
				</BLOCKQUOTE>
				
				<BLOCKQUOTE>
					<DT STYLE="margin-right: 0.39in; margin-bottom: 0.2in">[IPC_ERROR_INITIALIZATION_ERROR]</DT>
					<DT STYLE="margin-right: 0.39in; margin-bottom: 0.2in">
						The channel has not been initialized or has been destroyed.
					</DT>
				</BLOCKQUOTE>
				
				<BLOCKQUOTE>
					<DT STYLE="margin-right: 0.39in; margin-bottom: 0.2in">[IPC_ERROR_SYSTEM_CALL_ERROR]</DT>
					<DT STYLE="margin-right: 0.39in; margin-bottom: 0.2in">
						The function has failed due to an operating system function error.
					</DT>
				</BLOCKQUOTE>
			</DL>
		</DL>
		
		<H4>&nbsp;EXAMPLES</H4>
		
		<DIV STYLE="margin-left: 0.39in; margin-bottom: 0.2in">
			See the documentation for <A HREF="ipc_channel_create.htm">ipc_channel_create()</A> for an example of <i>ipc_channel_receive()</i>.
		</DIV>
		
		<HR SIZE=1 NOSHADE>
		
		<CENTER>
			<BLOCKQUOTE>
				Copyright © 2010 Aaron Clovsky
			</BLOCKQUOTE>
		</CENTER>
	
	</BODY>
</HTML>